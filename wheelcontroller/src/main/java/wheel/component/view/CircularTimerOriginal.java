package wheel.component.view;import android.content.Context;import android.util.AttributeSet;import android.view.LayoutInflater;import android.widget.LinearLayout;import android.widget.TextView;import com.nineoldandroids.animation.Animator;import com.nineoldandroids.animation.Animator.AnimatorListener;import com.nineoldandroids.animation.ObjectAnimator;import com.nineoldandroids.animation.ValueAnimator;import com.nineoldandroids.animation.ValueAnimator.AnimatorUpdateListener;import mma.mtake.wheel.component.R;import wheel.component.utils.PreciseTimer;import wheel.component.utils.PreciseTimer.PreciseTimerListener;/** *  * @author josephwang *  */public class CircularTimerOriginal extends LinearLayout {	private Context ctx;	private TextView hourText;	private TextView minuteText;	private TextView secondText;	private TextView title;	private CountDownTimeMode countDownTimeMode = CountDownTimeMode.Begin;	private CircularProgressBar circular;	private ObjectAnimator animator;	private String[] hourArray = new String[24];	private String[] minuteArray = new String[60];	private String[] secondArray = new String[60];	private float progresses;	private PreciseTimer timer;	private long beginTime = 3000L;	private long totalSeconds = 0;	public CountDownTimeMode getCountDownTimeMode() {		return countDownTimeMode;	}	public CircularTimerOriginal(Context context) {		super(context);		ctx = context;		initData();		initStyle(null);		initView();	}	public CircularTimerOriginal(Context context, AttributeSet attrs) {		super(context, attrs);		ctx = context;		initData();		initStyle(attrs);		initView();	}	private void initView() {		LinearLayout circular_timer = (LinearLayout) LayoutInflater.from(ctx).inflate(R.layout.circular_timer, this, true);		hourText = (TextView) circular_timer.findViewById(R.id.hour);		minuteText = (TextView) circular_timer.findViewById(R.id.minute);		secondText = (TextView) circular_timer.findViewById(R.id.second);		title = (TextView) circular_timer.findViewById(R.id.title);		circular = (CircularProgressBar) circular_timer.findViewById(R.id.circular);		animator = ObjectAnimator.ofFloat(circular, "progress", 1);		circular.setMarkerEnabled(true);	}	private void initStyle(AttributeSet attrs) {	}	private void initData() {		for (int index = 0; index < 24; index++) {			hourArray[index] = addZeroIfSmallThenTen(index);		}		for (int index = 0; index < 60; index++) {			minuteArray[index] = addZeroIfSmallThenTen(index);			secondArray[index] = addZeroIfSmallThenTen(index);		}	}	private String addZeroIfSmallThenTen(int res) {		StringBuffer result = new StringBuffer();		if (res < 10) {			result.append("0").append(String.valueOf(res));		} else {			result.append(res);		}		return result.toString();	}	private long tickTimeSecond = 0L;	private PreciseTimerListener timerListener = new PreciseTimerListener() {		@Override		public void timeout() {			circular.setDissmissEvent(false);			circular.setFinalDissmissEvent(true);			countDownTimeMode = CountDownTimeMode.TimeOut;			tickTimeSecond = 0L;			removeCallbacks(updateTimer);			post(stopTimer);			post(startCircular);		}		@Override		public void onTick(long tickSecond) {			countDownTimeMode = CountDownTimeMode.OnTick;			tickTimeSecond = tickSecond;			removeCallbacks(startTimer);			post(updateTimer);			post(updateCircularTimer);			animate(tickSecond);		}		@Override		public void onStart(long tickSecond) {			circular.setDissmissEvent(false);			circular.setFinalDissmissEvent(false);			countDownTimeMode = CountDownTimeMode.Begin;			tickTimeSecond = tickSecond;			post(startTimer);		}	};	/**	 * Animate.	 * 	 * @param progressBar	 *            the progress bar	 * @param listener	 *            the listener	 */	private void animate(final float progress) {		animator.setDuration(1000);		animator.addListener(new AnimatorListener() {			@Override			public void onAnimationCancel(Animator animation) {			}			@Override			public void onAnimationEnd(Animator animation) {				circular.setProgress((float) 100 - progress / beginTime);				if (tickTimeSecond == 0) {					circular.setMarkerProgress(0);					// circular.setEventProgress(0);					circular.setProgress(0);					removeCallbacks(updateCircularTimer);				}			}			@Override			public void onAnimationRepeat(Animator animation) {			}			@Override			public void onAnimationStart(Animator animation) {				if (tickTimeSecond == 1) {					circular.setMarkerProgress(0);					// circular.setEventProgress(0);				}				circular.setMarkerProgress((float) 100 - progress / beginTime);				circular.setEventProgress((float) 100 - progress / beginTime);				if (tickTimeSecond == 0) {					circular.setMarkerProgress(0);					// circular.setEventProgress(0);				}				progresses = (float) (1 - (progress / beginTime)) * 100f;				if (progresses >= 0 && progresses <= 14) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[0]));				} else if (progresses > 14 && progresses <= 28) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[1]));				} else if (progresses > 28 && progresses <= 42) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[2]));				} else if (progresses > 42 && progresses <= 56) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[3]));				} else if (progresses > 56 && progresses <= 70) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[4]));				} else if (progresses > 70 && progresses <= 84) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[5]));				} else if (progresses > 84) {					title.setTextColor(ctx.getResources().getColor(CircularProgressBar.eventColorArray[6]));				}			}		});		animator.addUpdateListener(new AnimatorUpdateListener() {			@Override			public void onAnimationUpdate(ValueAnimator animation) {				circular.setProgress((Float) animation.getAnimatedValue());			}		});		if (tickTimeSecond == 1) {			circular.setMarkerProgress(0);			// circular.setEventProgress(0);		}		post(startCircular);	}	private Runnable updateCircularTimer = new Runnable() {		@Override		public void run() {			circular.setEventProgress((float) 100 - tickTimeSecond / beginTime);		}	};	private Runnable updateTimer = new Runnable() {		@Override		public void run() {			hourText.setText("" + hourArray[getHourIndexByTime(tickTimeSecond)]);			minuteText.setText("" + minuteArray[getMinuteIndexByTime(tickTimeSecond)]);			secondText.setText("" + secondArray[getSecondIndexByTime(tickTimeSecond)]);		}	};	private Runnable triggerPreciseTimer = new Runnable() {		@Override		public void run() {			timer = new PreciseTimer(timerListener, totalSeconds);			timer.start();		}	};	private Runnable startTimer = new Runnable() {		@Override		public void run() {			hourText.setText("" + hourArray[getHourIndexByTime(tickTimeSecond)]);			minuteText.setText("" + minuteArray[getMinuteIndexByTime(tickTimeSecond)]);			secondText.setText("" + secondArray[getSecondIndexByTime(tickTimeSecond)]);		}	};	private Runnable stopTimer = new Runnable() {		@Override		public void run() {			hourText.setText("00");			minuteText.setText("00");			secondText.setText("00");		}	};	private Runnable startCircular = new Runnable() {		@Override		public void run() {			animator.start();		}	};	public void setTimer(long second) {		int hourIndex = getHourIndexByTime(second);		int minuteIndex = getMinuteIndexByTime(second);		int secondIndex = getSecondIndexByTime(second);		setTimer(hourIndex, minuteIndex, secondIndex);	}	private int getHourIndexByTime(long tickSecond) {		int index = (int) tickSecond / 60 / 60;		return index;	}	private int getMinuteIndexByTime(long tickSecond) {		int index = 0;		index = (int) tickSecond / 60;		if (index >= 60) {			index = index % 60;		}		return index;	}	public int getSecondIndexByTime(long tickSecond) {		int indexInSecond = (int) (tickSecond % (60 * 60));		indexInSecond = indexInSecond % 60;		return indexInSecond;	}	public void setTimer(int hour, int minute, int second) {		long secondInHour = hour * 60 * 60;		long secondInMinute = minute * 60;		long totalSecond = secondInHour + secondInMinute + second;		totalSeconds = totalSecond;		beginTime = totalSecond;		if (hour < 24) {			hourText.setText("" + hourArray[hour]);		}		if (minute < 60 && second < 60) {			minuteText.setText("" + minuteArray[minute]);			secondText.setText("" + secondArray[second]);		}		post(triggerPreciseTimer);	}	/**	 * Stop timer.</br> 停止Timer.	 */	public void stopTimer() {		if (timer != null) {			countDownTimeMode = CountDownTimeMode.Stop;			timer.stop();		}	}	/**	 * Pause timer,and record the tick second.</br> 暫停Timer 並記錄時間.	 */	public void pauseTimer() {		if (timer != null) {			countDownTimeMode = CountDownTimeMode.Pause;			timer.pause();		}	}	/**	 * Resume timer with the record time paused before.</br> 以上次暫停記錄時間,恢復Timer.	 */	public void resumeTimer() {		if (timer != null) {			countDownTimeMode = CountDownTimeMode.Resume;			timer.resume();		}	}	/**	 * ReStart timer with the begin time.</br> 重啟Timer.	 */	public void reStart() {		if (timer != null) {			countDownTimeMode = CountDownTimeMode.ReStart;			timer.reStart();		}	}}