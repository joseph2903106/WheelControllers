/* * Copyright (C) 2010 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package wheel.component.controller;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.res.Configuration;import android.os.Message;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnKeyListener;import android.view.WindowManager;import android.widget.TextView;import mma.mtake.wheel.component.R;import wheel.component.genview.GenWheelView;import wheel.component.utils.UIAdjuster;import wheel.component.utils.WheelUtility;import wheel.component.view.WheelTwoControlListener;import wheel.component.view.WheelTwoDimensionPicker;import wheel.component.view.WheelTwoDimensionPicker.TwoWheelSelectData;/** * * 利用WindowManager 動態的顯示滾輪視窗。</br> 請用WheelControlListener * 接收callback與選擇的結果</br> OnShowWheelListenr --->可以在滾輪顯示之前，做一些動作，如提示視窗。</br> *  * * A convenient class controls all two wheel dialog in the same activity * through the single {@link WheelTwoControlListener}.</br> Based on the reason * that diversifying the situation on each function,designing this controller * has to be the independent object. </br>Adding {@link OnShowWheelListener} * that gives the chance to handling something {@link OnShowWheelListener.showWheel(View v)} * occurred while {@link onTouchEvent} is triggered,before wheel Dialog is * showing.The data in right wheel is associated with the data in left wheel, * Therefore, whenever user scroll the left wheel that the right wheel will * prepare the data array through the current selecting data in left wheel. That * means if the data in left wheel is not associated with the data in right * wheel,and the original mechanism will hide the right wheel dynamically.This * controller uses the id of view to distinguish the different * {@link onTouchEvent} what view is triggered . Through the clue of View's * Id,the WheelControllerListener which receives the call back has to be * designed to be like follows example:</br> *  * <pre class="prettyprint"> *  * private String[] monthArray = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }; *  * TwoWheelDataCollection twoWheelData = new TwoWheelDataCollection(); * 		 * 		twoWheelData.leftData = monthArray; * 		twoWheelData.leftDataForDisplay = monthArray; * 		twoWheelData.rightData = new HashMap<String, String[]>(); * 		twoWheelData.rightDataForDisplay = new HashMap<String, String[]>(); * 		 * 		twoWheelData.rightData.clear(); * 		twoWheelData.rightDataForDisplay.clear(); *  * 		for (int i = 0; i < monthArray.length; i++) { * 			initDateArray(Integer.parseInt(monthArray[i])); * 			twoWheelData.rightData.put(monthArray[i], dateArray); * 			twoWheelData.rightDataForDisplay.put(monthArray[i], dateArray); * 		} * 	private List<String> tmp = new ArrayList<String>(); * 	private String[] dateArray; *  * 	private void initDateArray(int month) { * 		tmp.clear(); * 		// Generate day string array * 		switch (month) { * 		case 1:// 大月 * 		case 3: * 		case 5: * 		case 7: * 		case 8: * 		case 10: * 		case 12: * 			produceDate(31);// 大月 * 			break; * 		case 4: * 		case 6: * 		case 9: * 		case 11: * 			produceDate(30);// 小月 * 			break; * 		case 2: * 			produceDate(28);// 小月 * 			break; * 		} * 	} *  * 	private void produceDate(int size) { * 		for (int i = 1; i <= size; i++) { * 			tmp.add(String.valueOf(i)); * 		} * 		dateArray = tmp.toArray(new String[0]); * 	} *  *  * </pre> *  * @author JosephWang *  */public class WheelTwoController implements OnKeyListener {	private Dialog dialog;	public static final String TAG = WheelController.class.getSimpleName();	private WindowManager.LayoutParams params = new WindowManager.LayoutParams();	private WheelTwoControlListener controllerListenr;	private WheelTwoDimensionPicker wheelView;	private int leftIndex = 0;	private TextView titleView;	private String titleText = "";	public String getTitleText() {		return titleText;	}	public void setTitleText(String titleText) {		this.titleText = titleText;	}	/**	 * 左邊滾輪 選到的資料 index	 * 	 * @return leftIndex	 */	public int getLeftIndex() {		return leftIndex;	}	private int rightIndex = 0;	/**	 * 右邊滾輪 選到的資料 index	 * 	 * @return leftIndex	 */	public int getRightIndex() {		return rightIndex;	}	private GenWheelView leftGenView;	private Context activity;	/**	 * 左邊滾輪的View 樣式	 * 	 * @return	 */	public GenWheelView getLeftGenView() {		return leftGenView;	}	/**	 * 設定左邊滾輪的View 樣式	 * 	 * @return	 */	public void setLeftGenView(GenWheelView leftGenView) {		this.leftGenView = leftGenView;	}	private GenWheelView rightGenView;	/**	 * 右邊滾輪的View 樣式	 * 	 * @return	 */	public GenWheelView getRightGenView() {		return rightGenView;	}	/**	 * 設定右邊滾輪的View 樣式	 * 	 * @return	 */	public void setRightGenView(GenWheelView rightGenView) {		this.rightGenView = rightGenView;	}	private View wheel;	private TwoWheelSelectData selectData = new TwoWheelSelectData();	/**	 * 目前所選資料 如果是文字的話，所選的資料結構	 * 	 * @return	 */	public TwoWheelSelectData getSelectData() {		return selectData;	}	private int leftWheelVisibleLine = 1;	private boolean currentSelectVisible = false;	public boolean isCurrentSelectVisible() {		return currentSelectVisible;	}	/**	 * 設定是否及時顯示所選資料	 * 	 * @return	 */	public void setCurrentSelectVisible(boolean currentSelectVisible) {		this.currentSelectVisible = currentSelectVisible;	}	public int getLeftWheelVisibleLine() {		return leftWheelVisibleLine;	}	/**	 * 設定左邊顯示的文字行數	 * 	 * @param leftWheelVisibleLine	 */	public void setLeftWheelVisibleLine(int leftWheelVisibleLine) {		this.leftWheelVisibleLine = leftWheelVisibleLine;	}	private int rightWheelVisibleLine = 1;	public int getRightWheelVisibleLine() {		return rightWheelVisibleLine;	}	/**	 * 設定右邊顯示的文字行數	 * 	 * @param leftWheelVisibleLine	 */	public void setRightWheelVisibleLine(int rightWheelVisibleLine) {		this.rightWheelVisibleLine = rightWheelVisibleLine;	}	/**	 * 顯示兩個純文字的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 */	public WheelTwoController(Activity curr, WheelTwoControlListener controllerListenr) {		this(curr, controllerListenr, null, null);	}	/**	 * 顯示兩個同一樣式的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 */	public WheelTwoController(Context curr, WheelTwoControlListener controllerListenr, GenWheelView genView) {		this(curr, controllerListenr, genView, genView);	}	/**	 * 顯示兩個兩樣式的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 * @param leftGenView	 * @param rightGenView	 */	public WheelTwoController(Context curr, WheelTwoControlListener controllerListenr, GenWheelView leftGenView, GenWheelView rightGenView) {		this.activity = curr;		this.controllerListenr = controllerListenr;		this.leftGenView = leftGenView;		this.rightGenView = rightGenView;		initWheel();		initDailog();	}	private void initDailog() {		if (dialog == null) {			dialog = new Dialog(activity, R.style.DialogSlideAnim);		}	}	/**	 * 	 * @param eachView	 * @param data	 *            The Data Collection for Two Wheel Picker.</br> 兩個滾輪用的資料集合	 * @author josephWang	 * 	 */	public void setWheelListener(View eachView, TwoWheelDataCollection data) {		eachView.setOnClickListener(getWheelListener(data, 1));	}	/**	 * 	 * @param eachView	 * @param data	 *            The Data Collection for Two Wheel Picker.</br> 兩個滾輪用的資料集合	 * @param line	 *            顯示資料行數	 */	public void setWheelListener(View eachView, TwoWheelDataCollection data, int line) {		eachView.setOnClickListener(getWheelListener(data, line));	}	private Message wheelMsg = new Message();	private View.OnClickListener getWheelListener(final TwoWheelDataCollection data, final int line) {		return new View.OnClickListener() {			@Override			public void onClick(View v) {				UIAdjuster.closeKeyBoard(activity);				if (onShowWheelListener.showWheel(v)) {					leftIndex = 0;					rightIndex = 0;					wheelMsg.what = v.getId();					if (data == null) {						wheelMsg.obj = new TwoWheelDataCollection();					} else {						wheelMsg.obj = data;					}					changeInPutItems(v, line);				}			}		};	}	/**	 * 初始化滾輪視窗元件	 */	private void initWheel() {		wheel = (View) LayoutInflater.from(activity).inflate(R.layout.wheel_two, null);		titleView = (TextView) wheel.findViewById(R.id.title);		wheelView = (WheelTwoDimensionPicker) wheel.findViewById(R.id.wheel_view);		wheel.findViewById(R.id.ok).setOnClickListener(clickListener);		wheel.findViewById(R.id.cancel).setOnClickListener(clickListener);	}	private void changeInPutItems(View trigger, final int line) {		titleView.setText("" + getTitleText());		TwoWheelDataCollection twoWheelData = (TwoWheelDataCollection) wheelMsg.obj;		if (leftGenView != null && rightGenView != null) {			wheelView.setViewGenerator(leftGenView, rightGenView);		}		wheelView.setCurrentSelectVisible(isCurrentSelectVisible());		wheelView.setAllData(twoWheelData.leftData, twoWheelData.leftDataForDisplay, twoWheelData.rightData, twoWheelData.rightDataForDisplay);		wheelView.setLeftWheelVisibleLine(getLeftWheelVisibleLine());		wheelView.setRightWheelVisibleLine(getRightWheelVisibleLine());		wheelView.setTextSize(getTextSize());		wheelView.setWheelListener(wheelMsg.what, listener);		wheelView.backToZeroIndex();		scrollToController.onShowWheel(wheelView);		leftIndex = wheelView.getIndexLeft();		rightIndex = wheelView.getIndexRight();		params.copyFrom(dialog.getWindow().getAttributes());		switch (WheelUtility.getScreenOrientation(trigger.getContext()))		{			case Configuration.ORIENTATION_PORTRAIT:				params.width = WindowManager.LayoutParams.MATCH_PARENT;				break;			case Configuration.ORIENTATION_LANDSCAPE:				params.width = (int) UIAdjuster.computeDIPtoPixel(trigger.getContext(), 320);				break;		}		params.height = WindowManager.LayoutParams.WRAP_CONTENT;		params.gravity = Gravity.BOTTOM;		params.y = (int) UIAdjuster.computeDIPtoPixel(activity, getBottomMargin());		dialog.getWindow().setAttributes(params);		dialog.setContentView(wheel);		dialog.show();	}	public void scrollWheelByIndex(int leftIndex, int rightIndex) {		wheelView.scrollWheel(leftIndex, rightIndex);	}	public void scrollWheelByIndex(int leftIndex, int rightIndex, boolean animated) {		wheelView.scrollWheel(leftIndex, rightIndex, animated);	}	private WheelScrollToController scrollToController = new WheelScrollToController() {		@Override		public void onShowWheel(View v) {		}	};	public WheelScrollToController getScrollToController() {		return scrollToController;	}	public void setScrollToController(WheelScrollToController scrollToController) {		this.scrollToController = scrollToController;	}	private View.OnClickListener clickListener = new View.OnClickListener() {		@Override		public void onClick(View v) {			if (v.getId() == R.id.ok) {				if (wheelView.isScrollFinish()) {					controllerListenr.handleSelect(wheelMsg.what, selectData, leftIndex, rightIndex);					dismiss();				}			} else if (v.getId() == R.id.cancel) {				dismiss();			}		}	};	private WheelTwoControlListener listener = new WheelTwoControlListener() {		@Override		public void handleSelect(int viewID, TwoWheelSelectData data, int innerLeftIndex, int innerRightIndex) {			leftIndex = innerLeftIndex;			rightIndex = innerRightIndex;			selectData = data;		}	};	private int textSize = 22;	/**	 * 設定顯示在滾輪的字體大小 in dip，預設22dip	 * 	 * @param textSize	 */	public int getTextSize() {		return textSize;	}	public void setTextSize(int textSize) {		this.textSize = textSize;	}	private int bottomMargin = 60;	public int getBottomMargin() {		return bottomMargin;	}	/**	 * 設定視窗下方的margin，預設60dp	 * 	 * @param forMargin	 */	public void setBottomMargin(int forMargin) {		this.bottomMargin = forMargin;	}	/**	 * 關閉滾輪	 */	public void dismiss() {		if (dialog != null) {			dialog.dismiss();		}	}	private OnShowWheelListener onShowWheelListener = new OnShowWheelListener() {		@Override		public boolean showWheel(View v) {			return true;		}	};	public OnShowWheelListener getOnShowWheelListenr() {		return onShowWheelListener;	}	/**	 * 設定在滾輪顯示之前，可以做預設動作的callBack return true : 顯示滾輪視窗</br> return false :	 * 不顯示滾輪視窗	 * 	 * @author JosephWang	 * 	 */	public void setOnShowWheelListenr(OnShowWheelListener onShowWheelListenr) {		this.onShowWheelListener = onShowWheelListenr;	}	@Override	public boolean onKey(View v, int keyCode, KeyEvent event) {		dismiss();		return onKey(v, keyCode, event);	}}