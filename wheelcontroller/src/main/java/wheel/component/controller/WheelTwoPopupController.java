/* * Copyright (C) 2010 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package wheel.component.controller;import wheel.component.genview.GenWheelView;import wheel.component.utils.UIAdjuster;import wheel.component.view.TriangleView;import wheel.component.view.WheelTwoControlListener;import wheel.component.view.WheelTwoDimensionPicker;import wheel.component.view.WheelTwoDimensionPicker.TwoWheelSelectData;import mma.mtake.wheel.component.R;import android.app.Activity;import android.content.Context;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Message;import android.view.Display;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.PopupWindow;import android.widget.TextView;/** * 利用PopupWindow 動態的顯示滾輪視窗。</br> 請用WheelControlListener 接收callback與選擇的結果</br> * OnShowWheelListenr --->可以在滾輪顯示之前，做一些動作，如提示視窗。</br> *  * Be careful!!!. Depends on the Google internal policy,</br> you can not leave * PopupWindow open while Activity is being finished.You have to close this * PopupWindow before Activity to be finished.Otherwise, the only consequences * you will receive that Application is terminated</br></br> *  * PopupWindow 一定要在 Activity 被finish之前關起來，不然程式會crash *  * <pre class="prettyprint"> * 使用範例 * *   TwoWheelDataCollection twoWheelData = new TwoWheelDataCollection(); * 		 * 		twoWheelData.leftData = monthArray; * 		twoWheelData.leftDataForDisplay = monthArray; * 		twoWheelData.rightData = new HashMap<String, String[]>(); * 		twoWheelData.rightDataForDisplay = new HashMap<String, String[]>(); *  * WheelTwoPopupController controller = new WheelTwoPopupController(this, twoWheelListener); * 		controller.setWheelListener(test_left, twoWheelData, onShowWheelListenr); * 		controller.setWheelListener(test_right, twoWheelData); *  * for (int i = 0; i < monthArray.length; i++) { * 			initDateArray(Integer.parseInt(monthArray[i])); * 			twoWheelData.rightData.put(monthArray[i], dateArray); * 			twoWheelData.rightDataForDisplay.put(monthArray[i], dateArray); * 		} * 	private List<String> tmp = new ArrayList<String>(); * 	private String[] dateArray; *  * 	private void initDateArray(int month) { * 		tmp.clear(); * 		// Generate day string array * 		switch (month) { * 		case 1:// 大月 * 		case 3: * 		case 5: * 		case 7: * 		case 8: * 		case 10: * 		case 12: * 			produceDate(31);// 大月 * 			break; * 		case 4: * 		case 6: * 		case 9: * 		case 11: * 			produceDate(30);// 小月 * 			break; * 		case 2: * 			produceDate(28);// 小月 * 			break; * 		} * 	} *  * 	private void produceDate(int size) { * 		for (int i = 1; i <= size; i++) { * 			tmp.add(String.valueOf(i)); * 		} * 		dateArray = tmp.toArray(new String[0]); * 	} *  * </pre> *  * @author JosephWang *  */public class WheelTwoPopupController implements OnKeyListener {	private PopupWindow popWindow;// 提示視窗的	public static final String TAG = WheelPopupController.class.getSimpleName();	private WheelTwoControlListener controllerListenr;	private WheelTwoDimensionPicker wheelView;	private TwoWheelSelectData selectData = new TwoWheelSelectData();	private int currentViewId = 0;	private TextView titleView;	private String titleText = "";	public String getTitleText() {		return titleText;	}	/**	 * 設置滾輪視窗的中間title	 * 	 * @param titleText	 */	public void setTitleText(String titleText) {		this.titleText = titleText;	}	/**	 * 目前所選資料 如果是文字的話，所選的資料結構	 * 	 * @return	 */	public TwoWheelSelectData getSelectData() {		return selectData;	}	private boolean currentSelectVisible = false;	public boolean isCurrentSelectVisible() {		return currentSelectVisible;	}	/**	 * 設定是否及時顯示所選資料	 * 	 * @return	 */	public void setCurrentSelectVisible(boolean currentSelectVisible) {		this.currentSelectVisible = currentSelectVisible;	}	private int leftWheelVisibleLine = 1;	public int getLeftWheelVisibleLine() {		return leftWheelVisibleLine;	}	/**	 * 設定左邊顯示的文字行數	 * 	 * @param leftWheelVisibleLine	 */	public void setLeftWheelVisibleLine(int leftWheelVisibleLine) {		this.leftWheelVisibleLine = leftWheelVisibleLine;	}	private int rightWheelVisibleLine = 1;	public int getRightWheelVisibleLine() {		return rightWheelVisibleLine;	}	/**	 * 設定右邊顯示的文字行數	 * 	 * @param leftWheelVisibleLine	 */	public void setRightWheelVisibleLine(int rightWheelVisibleLine) {		this.rightWheelVisibleLine = rightWheelVisibleLine;	}	private int leftIndex = 0;	/**	 * 左邊滾輪 選到的資料 index	 * 	 * @return leftIndex	 */	public int getLeftIndex() {		return leftIndex;	}	private int rightIndex = 0;	/**	 * 右邊滾輪 選到的資料 index	 * 	 * @return leftIndex	 */	public int getRightIndex() {		return rightIndex;	}	private int moveCenterX;	private int moveCenterY;	private int dialogWidth = 300;	public int getDialogWidth() {		return dialogWidth;	}	/**	 * 設定視窗寬度 預設300	 * 	 * @return dialogWidth	 */	public void setDialogWidth(int dialogWidth) {		this.dialogWidth = dialogWidth;	}	private int dialogHeight = 280;	public int getDialogHeight() {		return dialogHeight;	}	/**	 * 設定視窗高度 預設275	 * 	 * @return dialogWidth	 */	public void setDialogHeight(int dialogHeight) {		this.dialogHeight = dialogHeight;	}	private int textSize = 22;	public int getTextSize() {		return textSize;	}	/**	 * 設定字體大小	 * 	 * @return dialogWidth	 */	public void setTextSize(int textSize) {		this.textSize = textSize;	}	private int bottomMargin = 60;	public int getBottomMargin() {		return bottomMargin;	}	/**	 * 設定視窗底部margin	 * 	 * @return dialogWidth	 */	public void setBottomMargin(int forMargin) {		this.bottomMargin = forMargin;	}	private int popWindowPositionX = 0;	private int popWindowPositionY = 0;	private int deviceWidth = 0;	private int deviceHeight = 0;	private ViewGroup wheel;	private Message wheelMsg = new Message();	private int[] archorViewLocation = new int[2];	private GenWheelView leftGenView;	/**	 * 左邊滾輪的View 樣式	 * 	 * @return	 */	public GenWheelView getLeftGenView() {		return leftGenView;	}	private GenWheelView rightGenView;	/**	 * 右邊滾輪的View 樣式	 * 	 * @return	 */	public GenWheelView getRightGenView() {		return rightGenView;	}	/**	 * 顯示兩個純文字的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 */	public WheelTwoPopupController(Activity curr, WheelTwoControlListener controllerListenr) {		this(curr, controllerListenr, null, null);	}	/**	 * 顯示兩個同一樣式的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 */	public WheelTwoPopupController(Context curr, WheelTwoControlListener controllerListenr, GenWheelView genView) {		this(curr, controllerListenr, genView, genView);	}	/**	 * 顯示兩個兩樣式的滾輪視窗	 * 	 * @param curr	 * @param controllerListenr	 * @param leftGenView	 * @param rightGenView	 */	public WheelTwoPopupController(Context curr, WheelTwoControlListener controllerListenr, GenWheelView leftGenView, GenWheelView rightGenView) {		this.activity = curr;		this.controllerListenr = controllerListenr;		this.leftGenView = leftGenView;		this.rightGenView = rightGenView;		initWheel();		initPopWindow();	}	private boolean isTouchOutSideCancelable = true;	public boolean isTouchOutSideCancelable() {		return isTouchOutSideCancelable;	}	/**	 * 設定是否可以由外部點擊，來關閉Pop Up視窗	 * 	 * @param isTouchOutSideCancelable	 */	public void setTouchOutSideCancelable(boolean isTouchOutSideCancelable) {		this.isTouchOutSideCancelable = isTouchOutSideCancelable;	}	private TwoWheelDataCollection sArray;// 顯示在滾輪上的資料結構	private Context activity;	/**	 * 初始化視窗	 */	private void initPopWindow() {		if (popWindow == null) {			popWindow = new PopupWindow(wheel, (int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()), (int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()));			popWindow.setAnimationStyle(R.style.PopupArchorAnimation);			// popWindow.setBackgroundDrawable(null);//			// let_Animation_to_be_smooth!!!			/*** let_OutsideTouchable_to_be_work_for_closing_PopUpWindow!! *****/			popWindow.setBackgroundDrawable(new ColorDrawable(android.R.color.transparent));//			/*** let_OutsideTouchable_to_be_work_for_closing_PopUpWindow!! *****/			popWindow.setTouchable(true);			popWindow.setFocusable(true);			popWindow.setClippingEnabled(false);			popWindow.setOutsideTouchable(true);			popWindow.setTouchInterceptor(new OnTouchListener() {				@Override				public boolean onTouch(View v, MotionEvent event) {					switch (event.getAction()) {					case MotionEvent.ACTION_OUTSIDE:						if (isTouchOutSideCancelable()) {							dismiss();							return true;						} else {							return false;						}					}					return false;				}			});		}	}	/**	 * Close the WheelPopUpDateDialog.</br> 關閉滾輪	 * **/	public void dismiss() {		if (popWindow != null) {			popWindow.dismiss();		}	}	/**	 * 調整視窗位置	 * **/	private void adjustPopUpPosition(View anchor) {		left_top_triangle.setVisibility(View.GONE);		center_top_triangle.setVisibility(View.GONE);		right_top_triangle.setVisibility(View.GONE);		left_bottom_triangle.setVisibility(View.GONE);		center_bottom_triangle.setVisibility(View.GONE);		right_bottom_triangle.setVisibility(View.GONE);		if (!popWindow.isShowing()) {			/****************** 使用者點擊View 右邊寬度不足於放PopUpWindow 的調整 ***************************/			if (Math.abs(deviceWidth - moveCenterX) < Math.abs(deviceWidth - (int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()))) {				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth());			} else {				popWindowPositionX = 0;			}			if (Math.abs(deviceHeight - moveCenterY) < (int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight())) {				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;			} else {				popWindowPositionY = 0;			}			/****************** 使用者點擊在右下角 ***************************/			if (moveCenterX > deviceWidth / 2 && moveCenterY > deviceHeight / 2) {// 右下角				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()) + anchor.getWidth();				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.VISIBLE);			}			/****************** 使用者點擊在左下角 ***************************/			else if (moveCenterX < deviceWidth / 2 && moveCenterY > deviceHeight / 2) {// 左下角				popWindowPositionX = 0;				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.VISIBLE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			/****************** 使用者點擊在右上角 ***************************/			else if (moveCenterX > deviceWidth / 2 && moveCenterY < deviceHeight / 2) {// 右上角				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()) + anchor.getWidth();				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.VISIBLE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			/****************** 使用者點擊在左上角 ***************************/			else if (moveCenterX < deviceWidth / 2 && moveCenterY < deviceHeight / 2) {// 左上角				popWindowPositionX = 0;				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.VISIBLE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			} else {				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.VISIBLE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			popWindow.showAsDropDown(anchor, popWindowPositionX, popWindowPositionY);			popWindowPositionX = 0;			popWindowPositionY = 0;		}	}	/**	 * 	 * @param eachView	 * @param data	 *            The Data Collection for Two Wheel Picker.</br> 兩個滾輪用的資料集合	 * @author josephWang	 * 	 */	public void setWheelListener(View eachView, TwoWheelDataCollection data) {		eachView.setOnClickListener(getWheelListener(data, 1));	}	/**	 * 	 * @param eachView	 * @param data	 *            The Data Collection for Two Wheel Picker.</br> 兩個滾輪用的資料集合	 * @param line	 *            顯示資料行數	 */	public void setWheelListener(View eachView, TwoWheelDataCollection data, int line) {		eachView.setOnClickListener(getWheelListener(data, line));	}	private View.OnClickListener getWheelListener(final TwoWheelDataCollection data, final int line) {		return new View.OnClickListener() {			@Override			public void onClick(View v) {				UIAdjuster.closeKeyBoard(activity);				if (onShowWheelListener.showWheel(v)) {					leftIndex = 0;					wheelMsg.what = v.getId();					if (data == null) {						wheelMsg.obj = new TwoWheelSelectData();					} else {						wheelMsg.obj = data;					}					changeInPutItems(v, data, line);				}			}		};	}	private TriangleView left_top_triangle;	private TriangleView center_top_triangle;	private TriangleView right_top_triangle;	private TriangleView left_bottom_triangle;	private TriangleView center_bottom_triangle;	private TriangleView right_bottom_triangle;	/**	 * 初始化滾輪視窗元件	 */	private void initWheel() {		wheel = (ViewGroup) LayoutInflater.from(activity).inflate(R.layout.wheel_two_popup, null);		titleView = (TextView) wheel.findViewById(R.id.title);		wheelView = (WheelTwoDimensionPicker) wheel.findViewById(R.id.wheel_view);		wheel.setBackgroundColor(Color.argb(0, 0, 0, 0));		wheel.findViewById(R.id.ok).setOnClickListener(clickListener);		wheel.findViewById(R.id.cancel).setOnClickListener(clickListener);		wheelView.setWheelListener(currentViewId, controlListener);		left_top_triangle = (TriangleView) wheel.findViewById(R.id.left_top_triangle);		center_top_triangle = (TriangleView) wheel.findViewById(R.id.center_top_triangle);		right_top_triangle = (TriangleView) wheel.findViewById(R.id.right_top_triangle);		left_bottom_triangle = (TriangleView) wheel.findViewById(R.id.left_bottom_triangle);		center_bottom_triangle = (TriangleView) wheel.findViewById(R.id.center_bottom_triangle);		right_bottom_triangle = (TriangleView) wheel.findViewById(R.id.right_bottom_triangle);	}	@SuppressWarnings("deprecation")	private void changeInPutItems(View anchor, TwoWheelDataCollection data, int line) {		titleView.setText("" + getTitleText());		currentViewId = anchor.getId();		sArray = data;		if (sArray == null) {			sArray = new TwoWheelDataCollection();		}		if (deviceHeight == 0 || deviceWidth == 0) {			Display display = ((WindowManager) activity.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();			deviceHeight = display.getHeight();			deviceWidth = display.getWidth();		}		anchor.getLocationInWindow(archorViewLocation);		moveCenterX = archorViewLocation[0];		moveCenterY = archorViewLocation[1];		if (leftGenView != null && rightGenView != null) {			wheelView.setViewGenerator(leftGenView, rightGenView);		}		wheelView.setCurrentSelectVisible(isCurrentSelectVisible());		wheelView.setLeftWheelVisibleLine(getLeftWheelVisibleLine());		wheelView.setRightWheelVisibleLine(getRightWheelVisibleLine());		wheelView.setTextSize(getTextSize());		wheelView.setAllData(sArray.leftData, sArray.leftDataForDisplay, sArray.rightData, sArray.rightDataForDisplay);		wheelView.backToZeroIndex();		scrollToController.onShowWheel(wheelView);		leftIndex = wheelView.getIndexLeft();		rightIndex = wheelView.getIndexRight();		adjustPopUpPosition(anchor);	}	public void scrollWheelByIndex(int leftIndex, int rightIndex) {		wheelView.scrollWheel(leftIndex, rightIndex);	}	public void scrollWheelByIndex(int leftIndex, int rightIndex, boolean animated) {		wheelView.scrollWheel(leftIndex, rightIndex, animated);	}	private WheelScrollToController scrollToController = new WheelScrollToController() {		@Override		public void onShowWheel(View v) {		}	};	public WheelScrollToController getScrollToController() {		return scrollToController;	}	public void setScrollToController(WheelScrollToController scrollToController) {		this.scrollToController = scrollToController;	}	private View.OnClickListener clickListener = new View.OnClickListener() {		@Override		public void onClick(View v) {			if (v.getId() == R.id.ok) {				if (wheelView.isScrollFinish()) {					controllerListenr.handleSelect(currentViewId, selectData, leftIndex, rightIndex);					dismiss();				}			} else if (v.getId() == R.id.cancel) {				dismiss();			}		}	};	private WheelTwoControlListener controlListener = new WheelTwoControlListener() {		@Override		public void handleSelect(int viewID, TwoWheelSelectData data, int innerLeftIndex, int innerRightIndex) {			selectData = data;			leftIndex = innerLeftIndex;			rightIndex = innerRightIndex;		}	};	private OnShowWheelListener onShowWheelListener = new OnShowWheelListener() {		@Override		public boolean showWheel(View v) {			return true;		}	};	public OnShowWheelListener getOnShowWheelListenr() {		return onShowWheelListener;	}	/**	 * 設定在滾輪顯示之前，可以做預設動作的callBack return true : 顯示滾輪視窗</br> return false :	 * 不顯示滾輪視窗	 * 	 * @author JosephWang	 * 	 */	public void setOnShowWheelListenr(OnShowWheelListener onShowWheelListenr) {		this.onShowWheelListener = onShowWheelListenr;	}	@Override	public boolean onKey(View v, int keyCode, KeyEvent event) {		dismiss();		return onKey(v, keyCode, event);	}}