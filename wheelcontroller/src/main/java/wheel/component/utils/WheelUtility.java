package wheel.component.utils;import android.content.Context;import android.content.res.Configuration;import android.database.Cursor;import android.os.Message;import android.util.SparseArray;import android.util.SparseBooleanArray;import android.util.SparseIntArray;import android.view.Display;import android.view.Surface;import android.view.WindowManager;import java.util.ArrayList;import java.util.Collection;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Vector;public class WheelUtility {	public static int getScreenOrientation(Context ctx){		Display display = ((WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();		switch (display.getRotation()) {			case Surface.ROTATION_0:				return Configuration.ORIENTATION_PORTRAIT;			case Surface.ROTATION_90:				return Configuration.ORIENTATION_LANDSCAPE;			case Surface.ROTATION_180:				return Configuration.ORIENTATION_PORTRAIT;			default:				return Configuration.ORIENTATION_LANDSCAPE;		}	}	public static void setUpWheelSelectData(Object data, Message wheelMsg) {		if (data == null) {			wheelMsg.obj = "";		} else {			if (data instanceof Object[]) {				if (notEmpty((Object[]) data)) {					wheelMsg.obj = ((Object[]) data)[0];				} else {					wheelMsg.obj = "";				}			} else if (data instanceof ArrayList<?>) {				if (notEmpty((ArrayList<?>) data)) {					wheelMsg.obj = ((ArrayList<?>) data).get(0);				} else {					wheelMsg.obj = "";				}			} else if (data instanceof LinkedHashMap<?, ?>) {				if (notEmpty((LinkedHashMap<?, ?>) data)) {					LinkedHashMap<?, ?> map = (LinkedHashMap<?, ?>) data;					List<Object> valueList = new ArrayList<Object>(map.values());					wheelMsg.obj = valueList.get(0);				} else {					wheelMsg.obj = "";				}			} else if (data instanceof Cursor) {				if (notEmpty((Cursor) data)) {					wheelMsg.obj = ((Cursor) data).moveToFirst();				} else {					wheelMsg.obj = "";				}			} else if (data instanceof SparseArray<?>) {				if (notEmpty((SparseArray<?>) data)) {					wheelMsg.obj = ((SparseArray<?>) data).get(0);				} else {					wheelMsg.obj = "";				}			} else if (data instanceof SparseBooleanArray) {				if (notEmpty((SparseBooleanArray) data)) {					wheelMsg.obj = ((SparseBooleanArray) data).get(0);				} else {					wheelMsg.obj = false;				}			} else if (data instanceof SparseIntArray) {				if (notEmpty(((SparseIntArray) data))) {					wheelMsg.obj = ((SparseIntArray) data).get(0);				} else {					wheelMsg.obj = "0";				}			} else if (data instanceof Vector<?>) {				if (notEmpty((Vector<?>) data)) {					wheelMsg.obj = ((Vector<?>) data).get(0);				} else {					wheelMsg.obj = "";				}			} else if (data instanceof LinkedList<?>) {				if (notEmpty((LinkedList<?>) data)) {					wheelMsg.obj = ((LinkedList<?>) data).get(0);				} else {					wheelMsg.obj = "";				}			} else {				wheelMsg.obj = new Object();			}		}	}	/**	 * get The size in Current Select Data Collection.</br>	 * 	 * 返回目前所選資料集合的大小	 * 	 * @return size	 */	public static int getDataSize(Object sArray) {		if (sArray != null) {			if (sArray instanceof Object[]) {				return ((Object[]) sArray).length;			} else if (sArray instanceof ArrayList<?>) {				return ((ArrayList<?>) sArray).size();			} else if (sArray instanceof LinkedHashMap<?, ?>) {				LinkedHashMap<?, ?> map = (LinkedHashMap<?, ?>) sArray;				return map.size();			} else if (sArray instanceof Cursor) {				return ((Cursor) sArray).getCount();			} else if (sArray instanceof SparseArray<?>) {				return ((SparseArray<?>) sArray).size();			} else if (sArray instanceof SparseBooleanArray) {				return ((SparseBooleanArray) sArray).size();			} else if (sArray instanceof SparseIntArray) {				return ((SparseIntArray) sArray).size();			} else if (sArray instanceof Vector<?>) {				return ((Vector<?>) sArray).size();			} else if (sArray instanceof LinkedList<?>) {				return ((LinkedList<?>) sArray).size();			} else {				return 0;			}		} else {			return 0;		}	}	public static Object getDataByIndex(Object sArray, int index) {		if (getDataSize(sArray) > 0) {			if (sArray instanceof Object[]) {				return ((Object[]) sArray)[index];			} else if (sArray instanceof ArrayList<?>) {				return ((ArrayList<?>) sArray).get(index);			} else if (sArray instanceof LinkedHashMap<?, ?>) {				LinkedHashMap<?, ?> map = (LinkedHashMap<?, ?>) sArray;				List<Object> valueList = new ArrayList<Object>(map.values());				return valueList.get(index);			} else if (sArray instanceof Cursor) {				Cursor cursor = ((Cursor) sArray);				cursor.moveToPosition(index);				return cursor;			} else if (sArray instanceof SparseArray<?>) {				return ((SparseArray<?>) sArray).get(index);			} else if (sArray instanceof SparseBooleanArray) {				Boolean checked = ((SparseBooleanArray) sArray).get(((SparseBooleanArray) sArray).keyAt(index));				return checked;			} else if (sArray instanceof SparseIntArray) {				return ((SparseIntArray) sArray).get(index);			} else if (sArray instanceof Vector<?>) {				return ((Vector<?>) sArray).get(index);			} else if (sArray instanceof LinkedList<?>) {				return ((LinkedList<?>) sArray).get(index);			} else {				return sArray;			}		} else {			return null;		}	}	public static String[] ArrayListToStringArray(ArrayList<String> res) {		String[] result = new String[res.size()];		for (int i = 0; i < res.size(); i++) {			result[i] = res.get(i);		}		return result;	}	public static boolean notEmpty(Collection<?> list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(Map<?, ?> map) {		if (map != null && map.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(Object[] data) {		if (data != null && data.length > 0) {			return true;		}		return false;	}	public static boolean notEmpty(Set<?> set) {		if (set != null && set.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(Cursor cursor) {		if (cursor != null && cursor.getCount() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(Vector<?> list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(SparseArray<?> list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(SparseBooleanArray list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(SparseIntArray list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}	public static boolean notEmpty(LinkedList<?> list) {		if (list != null && list.size() > 0) {			return true;		}		return false;	}}