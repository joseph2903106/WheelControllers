/* * Copyright (C) 2010 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package wheel.component.datedialog;import android.content.Context;import android.graphics.drawable.ColorDrawable;import android.os.Message;import android.view.Display;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnKeyListener;import android.view.View.OnTouchListener;import android.view.WindowManager;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.TextView;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import kankan.wheel.widget.OnWheelChangedListener;import kankan.wheel.widget.OnWheelScrollListener;import kankan.wheel.widget.WheelView;import mma.mtake.wheel.component.R;import wheel.component.controller.OnShowWheelListener;import wheel.component.genview.GenWheelText;import wheel.component.genview.WheelGeneralAdapter;import wheel.component.utils.UIAdjuster;import wheel.component.view.TriangleView;import wheel.component.view.WheelControlListener;public class WheelPopUpDateDialog implements OnKeyListener {	public static final String TAG = WheelPopUpDateDialog.class.getSimpleName();	private WheelControlListener<Date> controllerListenr;	private Context activity;	private WheelView year;	private WheelView month;	private LinearLayout wheel;	private int popWindowPositionX = 0;	private int popWindowPositionY = 0;	private int deviceWidth = 0;	private int deviceHeight = 0;	private PopupWindow popWindow;// 提示視窗的	private Message wheelMsg = new Message();	private int[] archorViewLocation = new int[2];	private int yearRange = 10;	public void setYearRange(int yearRange) {		this.yearRange = yearRange;		setYearAndMonthArray();	}	private String[] yearArray = new String[yearRange];	private String[] monthArray = { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };	private String[] yearArrayForDisplay = new String[10];	private String[] monthArrayForDisplay;	private int indexYear;	private int indexMonth;	private String currSelectYear;	private String currSelectMonth;	private int moveCenterX;	private int moveCenterY;	private int dialogWidth = 300;	public int getDialogWidth() {		return dialogWidth;	}	public void setDialogWidth(int dialogWidth) {		this.dialogWidth = dialogWidth;	}	private int dialogHeight = 270;	public int getDialogHeight() {		return dialogHeight;	}	public void setDialogHeight(int dialogHeight) {		this.dialogHeight = dialogHeight;	}	public WheelPopUpDateDialog(Context act, WheelControlListener<Date> controllerListenr) {		this.activity = act;		this.controllerListenr = controllerListenr;		initWheel();		initPopWindow();		monthArrayForDisplay = act.getResources().getStringArray(R.array.month);		setYearAndMonthArray();	}	public WheelPopUpDateDialog(Context act, WheelControlListener<Date> controllerListenr, boolean isShowChinesemonth) {		this.activity = act;		this.controllerListenr = controllerListenr;		initWheel();		initPopWindow();		if (isShowChinesemonth) {			monthArrayForDisplay = act.getResources().getStringArray(R.array.month);		} else {			monthArrayForDisplay = monthArray;		}		setYearAndMonthArray(isShowChinesemonth);	}	// 顯示 西元年的位數	public WheelPopUpDateDialog(Context act, WheelControlListener<Date> controllerListenr, int year_yards) {		this.activity = act;		this.controllerListenr = controllerListenr;		monthArrayForDisplay = monthArray;		setYearAndMonthArray(year_yards);	}	public String getCurrSelectYear() {		return currSelectYear;	}	public String getCurrSelectMonth() {		return currSelectMonth;	}	public String getSelectDateString() {		String result = "";		if (currSelectYear.length() > 0 && currSelectMonth.length() > 0) {			if (UIAdjuster.getLanguage(activity)) {				result = currSelectMonth + "月" + currSelectYear + "年";			} else {				result = currSelectMonth + currSelectYear;			}		}		return result;	}	private void setYearAndMonthArray() {		int year = Calendar.getInstance().get(Calendar.YEAR);		yearArray = new String[yearRange];		for (int i = 0; i < 10; i++) {			yearArray[i] = String.valueOf(year + i);			yearArrayForDisplay[i] = String.valueOf(year + i) + (UIAdjuster.getLanguage(activity) ? "年" : "");		}	}	private void setYearAndMonthArray(boolean bisshowChineseYear) {		int year = Calendar.getInstance().get(Calendar.YEAR);		yearArray = new String[yearRange];		for (int i = 0; i < 10; i++) {			yearArray[i] = String.valueOf(year + i);			if (bisshowChineseYear) {				yearArrayForDisplay[i] = String.valueOf(year + i) + (UIAdjuster.getLanguage(activity) ? "年" : "");			} else {				yearArrayForDisplay[i] = String.valueOf(year + i).substring(2);			}		}	}	private void setYearAndMonthArray(int year_yards) {		int year = Calendar.getInstance().get(Calendar.YEAR);		yearArray = new String[yearRange];		for (int i = 0; i < 10; i++) {			yearArray[i] = String.valueOf(year + i);			yearArrayForDisplay[i] = String.valueOf(year + i).substring(4 - year_yards);		}	}	public void setWheelListener(View eachView, String title ) {		eachView.setOnClickListener(getWheelClickListener(title));	}	private OnShowWheelListener showWheelListener = new OnShowWheelListener() {		@Override		public boolean showWheel(View v) {			return true;		}	};	/**	 * 增加直接設定 OnShowWheelListener	 * @return @Link OnShowWheelListener	 */	public OnShowWheelListener getShowWheelListener() {		return showWheelListener;	}	public void setShowWheelListener(OnShowWheelListener showWheelListener) {		this.showWheelListener = showWheelListener;	}	private View.OnClickListener getWheelClickListener(final String title) {		return new View.OnClickListener() {			@Override			public void onClick(View v) {				UIAdjuster.closeKeyBoard(activity);				if (showWheelListener.showWheel(v)) {					indexYear = 0;					indexMonth = 0;					currSelectYear = yearArray[indexYear];					currSelectMonth = monthArray[indexMonth];					wheelMsg.what = v.getId();					wheelMsg.obj = getDate(yearArray[indexYear], monthArray[indexMonth]);					showDatePicker(v, title);				}			}		};	}	private boolean isTouchOutSideCancelable = true;	public boolean isTouchOutSideCancelable() {		return isTouchOutSideCancelable;	}	public void setTouchOutSideCancelable(boolean isTouchOutSideCancelable) {		this.isTouchOutSideCancelable = isTouchOutSideCancelable;	}	private void initPopWindow() {		if (popWindow == null) {			popWindow = new PopupWindow(wheel, (int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()), (int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()));			popWindow.setAnimationStyle(R.style.PopupArchorAnimation);			// popWindow.setBackgroundDrawable(null);//			// let_Animation_to_be_smooth!!!			/*** let_OutsideTouchable_to_be_work_for_closing_PopUpWindow!! *****/			popWindow.setBackgroundDrawable(new ColorDrawable(0));//			/*** let_OutsideTouchable_to_be_work_for_closing_PopUpWindow!! *****/			popWindow.setTouchable(true);			popWindow.setFocusable(true);			popWindow.setClippingEnabled(false);			popWindow.setOutsideTouchable(true);			popWindow.setTouchInterceptor(new OnTouchListener() {				@Override				public boolean onTouch(View v, MotionEvent event) {					switch (event.getAction()) {					case MotionEvent.ACTION_OUTSIDE:						if (isTouchOutSideCancelable()) {							dismissPopWindow();							return true;						} else {							return false;						}					}					return false;				}			});		}	}	/**	 * Close the WheelPopUpDateDialog.</br> 關閉滾輪	 * **/	public void dismissPopWindow() {		if (popWindow != null) {			popWindow.dismiss();		}	}	private TriangleView left_top_triangle;	private TriangleView center_top_triangle;	private TriangleView right_top_triangle;	private TriangleView left_bottom_triangle;	private TriangleView center_bottom_triangle;	private TriangleView right_bottom_triangle;	private void initWheel() {		if (wheel == null) {			wheel = (LinearLayout) LayoutInflater.from(activity).inflate(R.layout.date_picker_wheel_for_popup, null);			year = (WheelView) wheel.findViewById(R.id.year);			month = (WheelView) wheel.findViewById(R.id.month);			year.addScrollingListener(scrollListener);			month.addScrollingListener(scrollListener);			wheel.findViewById(R.id.ok).setOnClickListener(buttonClickListener);			wheel.findViewById(R.id.cancel).setOnClickListener(buttonClickListener);			left_top_triangle = (TriangleView) wheel.findViewById(R.id.left_top_triangle);			center_top_triangle = (TriangleView) wheel.findViewById(R.id.center_top_triangle);			right_top_triangle = (TriangleView) wheel.findViewById(R.id.right_top_triangle);			left_bottom_triangle = (TriangleView) wheel.findViewById(R.id.left_bottom_triangle);			center_bottom_triangle = (TriangleView) wheel.findViewById(R.id.center_bottom_triangle);			right_bottom_triangle = (TriangleView) wheel.findViewById(R.id.right_bottom_triangle);		}	}	/**	 *	 * @param anchor	 * @param title	 */	@SuppressWarnings("deprecation")	public void showDatePicker(View anchor, String title) {		if (deviceHeight == 0 || deviceWidth == 0) {			Display display = ((WindowManager) activity.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();			deviceHeight = display.getHeight();			deviceWidth = display.getWidth();		}		anchor.getLocationInWindow(archorViewLocation);		moveCenterX = archorViewLocation[0];		moveCenterY = archorViewLocation[1];		year.setCurrentItem(0);		month.setCurrentItem(0);		indexYear = year.getCurrentItem();		indexMonth = month.getCurrentItem();		currSelectYear = yearArray[indexYear];		currSelectMonth = monthArray[indexMonth];		wheelMsg.obj = getDate(yearArray[indexYear], monthArray[indexMonth]);		setWheelListener(year, yearArrayForDisplay);		setWheelListener(month, monthArrayForDisplay);		if (null != title) {			((TextView) wheel.findViewById(R.id.title)).setText(title);		}		adjustPopUpPosition(anchor);	}	private View.OnClickListener buttonClickListener = new View.OnClickListener() {		@Override		public void onClick(View v) {			if (v.getId() == R.id.ok) {				if (isScrollFinish()) {					controllerListenr.handleClick(wheelMsg.what, (Date) wheelMsg.obj);					dismiss();				}			} else if (v.getId() == R.id.cancel) {				dismiss();			}		}	};	/**	 * 調整視窗位置	 * **/	private void adjustPopUpPosition(View anchor) {		left_top_triangle.setVisibility(View.GONE);		center_top_triangle.setVisibility(View.GONE);		right_top_triangle.setVisibility(View.GONE);		left_bottom_triangle.setVisibility(View.GONE);		center_bottom_triangle.setVisibility(View.GONE);		right_bottom_triangle.setVisibility(View.GONE);		if (!popWindow.isShowing()) {			/****************** 使用者點擊View 右邊寬度不足於放PopUpWindow 的調整 ***************************/			if (Math.abs(deviceWidth - moveCenterX) < Math.abs(deviceWidth - (int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()))) {				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth());			} else {				popWindowPositionX = 0;			}			if (Math.abs(deviceHeight - moveCenterY) < (int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight())) {				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;			} else {				popWindowPositionY = 0;			}			/****************** 使用者點擊在右下角 ***************************/			if (moveCenterX > deviceWidth / 2 && moveCenterY > deviceHeight / 2) {// 右下角				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()) + anchor.getWidth();				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.VISIBLE);			}			/****************** 使用者點擊在左下角 ***************************/			else if (moveCenterX < deviceWidth / 2 && moveCenterY > deviceHeight / 2) {// 左下角				popWindowPositionX = 0;				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogHeight()) - anchor.getHeight() + (int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.VISIBLE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			/****************** 使用者點擊在右上角 ***************************/			else if (moveCenterX > deviceWidth / 2 && moveCenterY < deviceHeight / 2) {// 右上角				popWindowPositionX = -(int) UIAdjuster.computeDIPtoPixel(activity, getDialogWidth()) + anchor.getWidth();				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.VISIBLE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			/****************** 使用者點擊在左上角 ***************************/			else if (moveCenterX < deviceWidth / 2 && moveCenterY < deviceHeight / 2) {// 左上角				popWindowPositionX = 0;				popWindowPositionY = -(int) UIAdjuster.computeDIPtoPixel(activity, 25) / 2;				left_top_triangle.setVisibility(View.VISIBLE);				center_top_triangle.setVisibility(View.GONE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			} else {				left_top_triangle.setVisibility(View.GONE);				center_top_triangle.setVisibility(View.VISIBLE);				right_top_triangle.setVisibility(View.GONE);				left_bottom_triangle.setVisibility(View.GONE);				center_bottom_triangle.setVisibility(View.GONE);				right_bottom_triangle.setVisibility(View.GONE);			}			popWindow.showAsDropDown(anchor, popWindowPositionX, popWindowPositionY);			popWindowPositionX = 0;			popWindowPositionY = 0;		}	}	public void dismiss() {		if (popWindow != null) {			popWindow.dismiss();		}	}	private Date getDate(String yearString, String month) {		StringBuffer sBuffer = new StringBuffer();		sBuffer.append(yearString);		sBuffer.append(month);		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");		Date date = null;		try {			date = sdf.parse(sBuffer.toString());		} catch (ParseException e) {			e.printStackTrace();		}		return date;	}	private GenWheelText genView = new GenWheelText();	private void setWheelListener(WheelView wheelView, String[] data) {		WheelGeneralAdapter viewAdapter = new WheelGeneralAdapter(activity, genView);		viewAdapter.setData(data);		wheelView.setViewAdapter(viewAdapter);		wheelView.addChangingListener(changeListener);	}	private OnWheelChangedListener changeListener = new OnWheelChangedListener() {		@Override		public void onChanged(WheelView wheel, int oldValue, int newValue) {			if (wheel.getId() == R.id.year) {				currSelectYear = yearArray[newValue];				indexYear = newValue;			} else if (wheel.getId() == R.id.month) {				currSelectMonth = monthArray[newValue];				indexMonth = newValue;			}		}	};	private boolean isScrollFinish = true;	public boolean isScrollFinish() {		return isScrollFinish;	}	private OnWheelScrollListener scrollListener = new OnWheelScrollListener() {		@Override		public void onScrollingStarted(WheelView wheel) {			isScrollFinish = false;		}		@Override		public void onScrollingFinished(WheelView wheel) {			isScrollFinish = true;			indexYear = year.getCurrentItem();			indexMonth = month.getCurrentItem();			currSelectYear = yearArray[indexYear];			currSelectMonth = monthArray[indexMonth];			wheelMsg.obj = getDate(yearArray[indexYear], monthArray[indexMonth]);		}	};	@Override	public boolean onKey(View v, int keyCode, KeyEvent event) {		dismiss();		return onKey(v, keyCode, event);	}}